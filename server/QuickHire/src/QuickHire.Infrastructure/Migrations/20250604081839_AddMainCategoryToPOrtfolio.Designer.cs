// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickHire.Infrastructure.Persistence;

#nullable disable

namespace QuickHire.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604081839_AddMainCategoryToPOrtfolio")]
    partial class AddMainCategoryToPOrtfolio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.FilterOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GigFilterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("GigFilterId");

                    b.ToTable("FilterOptions");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.GigFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("SubSubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubSubCategoryId");

                    b.ToTable("GigFilters");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Clicks")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Clicks")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.SubSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Clicks")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("SubSubCategories");
                });

            modelBuilder.Entity("QuickHire.Domain.CustomOffers.CustomOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomOfferNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryTimeInDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ExpiresInDays")
                        .HasColumnType("int");

                    b.Property<int>("GigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("ProjectBriefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Revisions")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WithdrawalReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("WithdrawnAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("GigId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("ProjectBriefId");

                    b.HasIndex("SellerId");

                    b.ToTable("CustomOffers");
                });

            modelBuilder.Entity("QuickHire.Domain.CustomRequests.CustomRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Budget")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomRequestNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryTimeInDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("GigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("CustomRequests");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.Gig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Clicks")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModerationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("SubSubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("SubSubCategoryId");

                    b.ToTable("Gigs");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.GigMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilterOptionId")
                        .HasColumnType("int");

                    b.Property<int>("GigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GigId")
                        .IsUnique();

                    b.ToTable("GigMetadatas");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.GigRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFileUpload")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.ToTable("GigRequirements");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.PaymentPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryTimeInDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("Revisions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.ToTable("PaymentPlans");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.PaymentPlanInclude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomOfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("PaymentPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomOfferId");

                    b.HasIndex("PaymentPlanId");

                    b.ToTable("PaymentPlanIncludes");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("QuickHire.Domain.Messaging.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarredByBuyer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarredBySeller")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantAId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantARole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticipantBId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantBRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("QuickHire.Domain.Messaging.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomOfferId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RevisionId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("DeliveryId")
                        .IsUnique()
                        .HasFilter("[DeliveryId] IS NOT NULL");

                    b.HasIndex("RevisionId")
                        .IsUnique()
                        .HasFilter("[RevisionId] IS NOT NULL");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("QuickHire.Domain.Moderation.DeactivatedRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ReportedItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GigId")
                        .IsUnique()
                        .HasFilter("[GigId] IS NOT NULL");

                    b.HasIndex("ReportedItemId")
                        .IsUnique()
                        .HasFilter("[ReportedItemId] IS NOT NULL");

                    b.ToTable("DeactivatedRecords");
                });

            modelBuilder.Entity("QuickHire.Domain.Moderation.ReportedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReportedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GigId")
                        .IsUnique()
                        .HasFilter("[GigId] IS NOT NULL");

                    b.ToTable("ReportedItems");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AttachmentUrls")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("SourceFileUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.GigRequirementAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AttachmentUrls")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GigRequirementId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GigRequirementId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("GigRequirementAnswers");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceFee")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Tax")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("SellerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomeOfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<int?>("GigId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("SelectedPaymentPlanId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("GigId");

                    b.HasIndex("SelectedPaymentPlanId")
                        .IsUnique();

                    b.HasIndex("SellerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.OrderDeliveryDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeDateReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChanged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderDeliveryDates");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Revision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AttachmentUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SourceFileUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Revisions");
                });

            modelBuilder.Entity("QuickHire.Domain.ProjectBriefs.ProjectBrief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutBuyer")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("Budget")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryTimeInDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectBriefNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubSubCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WithdrawnAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SubSubCategoryId");

                    b.ToTable("ProjectBriefs");
                });

            modelBuilder.Entity("QuickHire.Domain.ProjectBriefs.SuitableSellerProjectBrief", b =>
                {
                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectBriefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomOfferId")
                        .HasColumnType("int");

                    b.HasKey("SellerId", "ProjectBriefId");

                    b.HasIndex("CustomOfferId")
                        .IsUnique()
                        .HasFilter("[CustomOfferId] IS NOT NULL");

                    b.HasIndex("ProjectBriefId");

                    b.ToTable("SuitableSellerProjectBriefs");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBillingAddress")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.BillingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("BillingDetails");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.BrowsingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int?>("GigId")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("GigId");

                    b.HasIndex("SellerId");

                    b.ToTable("BrowsingHistories");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.FavouriteGig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int?>("BuyerId1")
                        .HasColumnType("int");

                    b.Property<int>("FavouriteGigsListId")
                        .HasColumnType("int");

                    b.Property<int>("GigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("BuyerId1");

                    b.HasIndex("FavouriteGigsListId");

                    b.HasIndex("GigId");

                    b.ToTable("FavouriteGigs");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.FavouriteGigsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("FavouriteGigsLists");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.IndustrySkillSeller", b =>
                {
                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("IndustrySkillId")
                        .HasColumnType("int");

                    b.HasKey("SellerId", "IndustrySkillId");

                    b.HasIndex("IndustrySkillId");

                    b.ToTable("IndustrySkillSellers");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Clicks")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.UserLanguage", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("QuickHire.Infrastructure.Persistence.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("BillingDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModerationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BillingDetailsId")
                        .IsUnique()
                        .HasFilter("[BillingDetailsId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuickHire.Infrastructure.Persistence.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("QuickHire.Infrastructure.Persistence.Identity.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuickHire.Infrastructure.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuickHire.Infrastructure.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("QuickHire.Infrastructure.Persistence.Identity.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Infrastructure.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuickHire.Infrastructure.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.FAQ", b =>
                {
                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany("FAQs")
                        .HasForeignKey("GigId");

                    b.HasOne("QuickHire.Domain.Categories.MainCategory", "MainCategory")
                        .WithMany("FAQs")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("Gig");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.FilterOption", b =>
                {
                    b.HasOne("QuickHire.Domain.Categories.GigFilter", "GigFilter")
                        .WithMany("Options")
                        .HasForeignKey("GigFilterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GigFilter");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.GigFilter", b =>
                {
                    b.HasOne("QuickHire.Domain.Categories.SubSubCategory", "SubSubCategory")
                        .WithMany("GigFilters")
                        .HasForeignKey("SubSubCategoryId");

                    b.Navigation("SubSubCategory");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.SubCategory", b =>
                {
                    b.HasOne("QuickHire.Domain.Categories.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.SubSubCategory", b =>
                {
                    b.HasOne("QuickHire.Domain.Categories.SubCategory", "SubCategory")
                        .WithMany("SubSubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("QuickHire.Domain.CustomOffers.CustomOffer", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Buyer", "Buyer")
                        .WithMany("CustomOffers")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany("CustomOffers")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Messaging.Message", "Message")
                        .WithOne("CustomOffer")
                        .HasForeignKey("QuickHire.Domain.CustomOffers.CustomOffer", "MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Orders.Order", "Order")
                        .WithOne("CustomOffer")
                        .HasForeignKey("QuickHire.Domain.CustomOffers.CustomOffer", "OrderId");

                    b.HasOne("QuickHire.Domain.ProjectBriefs.ProjectBrief", "ProjectBrief")
                        .WithMany("CustomOffers")
                        .HasForeignKey("ProjectBriefId");

                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany("CustomOffers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Gig");

                    b.Navigation("Message");

                    b.Navigation("Order");

                    b.Navigation("ProjectBrief");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.CustomRequests.CustomRequest", b =>
                {
                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany("CustomRequests")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Messaging.Message", "Message")
                        .WithOne("CustomRequest")
                        .HasForeignKey("QuickHire.Domain.CustomRequests.CustomRequest", "MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gig");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.Gig", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany("Gigs")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Categories.SubSubCategory", "SubSubCategory")
                        .WithMany("Gigs")
                        .HasForeignKey("SubSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seller");

                    b.Navigation("SubSubCategory");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.GigMetadata", b =>
                {
                    b.HasOne("QuickHire.Domain.Categories.FilterOption", "FilterOption")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.Gigs.GigMetadata", "GigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany("Metadata")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FilterOption");

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.GigRequirement", b =>
                {
                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany("Requirements")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.PaymentPlan", b =>
                {
                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany("PaymentPlans")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.PaymentPlanInclude", b =>
                {
                    b.HasOne("QuickHire.Domain.CustomOffers.CustomOffer", "CustomOffer")
                        .WithMany("InclusiveServices")
                        .HasForeignKey("CustomOfferId");

                    b.HasOne("QuickHire.Domain.Gigs.PaymentPlan", "PaymentPlan")
                        .WithMany("Inclusions")
                        .HasForeignKey("PaymentPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomOffer");

                    b.Navigation("PaymentPlan");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.Tag", b =>
                {
                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany("Tags")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("QuickHire.Domain.Messaging.Conversation", b =>
                {
                    b.HasOne("QuickHire.Domain.Orders.Order", "Order")
                        .WithOne("Conversation")
                        .HasForeignKey("QuickHire.Domain.Messaging.Conversation", "OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("QuickHire.Domain.Messaging.Message", b =>
                {
                    b.HasOne("QuickHire.Domain.Messaging.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Orders.Delivery", "Delivery")
                        .WithOne("Message")
                        .HasForeignKey("QuickHire.Domain.Messaging.Message", "DeliveryId");

                    b.HasOne("QuickHire.Domain.Orders.Revision", "Revision")
                        .WithOne("Message")
                        .HasForeignKey("QuickHire.Domain.Messaging.Message", "RevisionId");

                    b.Navigation("Conversation");

                    b.Navigation("Delivery");

                    b.Navigation("Revision");
                });

            modelBuilder.Entity("QuickHire.Domain.Moderation.DeactivatedRecord", b =>
                {
                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.Moderation.DeactivatedRecord", "GigId");

                    b.HasOne("QuickHire.Domain.Moderation.ReportedItem", "ReportedItem")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.Moderation.DeactivatedRecord", "ReportedItemId");

                    b.Navigation("Gig");

                    b.Navigation("ReportedItem");
                });

            modelBuilder.Entity("QuickHire.Domain.Moderation.ReportedItem", b =>
                {
                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.Moderation.ReportedItem", "GigId");

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Delivery", b =>
                {
                    b.HasOne("QuickHire.Domain.Orders.Order", "Order")
                        .WithOne("Delivery")
                        .HasForeignKey("QuickHire.Domain.Orders.Delivery", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.GigRequirementAnswer", b =>
                {
                    b.HasOne("QuickHire.Domain.Gigs.GigRequirement", "GigRequirement")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.Orders.GigRequirementAnswer", "GigRequirementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Orders.Order", "Order")
                        .WithMany("GigRequirementAnswers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GigRequirement");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Invoice", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Buyer", "Buyer")
                        .WithMany("Invoices")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Orders.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("QuickHire.Domain.Orders.Invoice", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Order");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Order", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Buyer", "Buyer")
                        .WithMany("PlacedOrders")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany("Orders")
                        .HasForeignKey("GigId");

                    b.HasOne("QuickHire.Domain.Gigs.PaymentPlan", "SelectedPaymentPlan")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.Orders.Order", "SelectedPaymentPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany("SoldOrders")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Gig");

                    b.Navigation("SelectedPaymentPlan");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.OrderDeliveryDate", b =>
                {
                    b.HasOne("QuickHire.Domain.Orders.Order", "Order")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.Orders.OrderDeliveryDate", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Review", b =>
                {
                    b.HasOne("QuickHire.Domain.Orders.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Revision", b =>
                {
                    b.HasOne("QuickHire.Domain.Orders.Order", "Order")
                        .WithMany("Revisions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("QuickHire.Domain.ProjectBriefs.ProjectBrief", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Buyer", "Buyer")
                        .WithMany("ProjectBriefs")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Categories.SubSubCategory", "SubSubCategory")
                        .WithMany()
                        .HasForeignKey("SubSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("SubSubCategory");
                });

            modelBuilder.Entity("QuickHire.Domain.ProjectBriefs.SuitableSellerProjectBrief", b =>
                {
                    b.HasOne("QuickHire.Domain.CustomOffers.CustomOffer", "CustomOffer")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.ProjectBriefs.SuitableSellerProjectBrief", "CustomOfferId");

                    b.HasOne("QuickHire.Domain.ProjectBriefs.ProjectBrief", "ProjectBrief")
                        .WithMany()
                        .HasForeignKey("ProjectBriefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomOffer");

                    b.Navigation("ProjectBrief");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Address", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Country", "Country")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.Users.Address", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.BillingDetails", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Address", "Address")
                        .WithOne()
                        .HasForeignKey("QuickHire.Domain.Users.BillingDetails", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.BrowsingHistory", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Buyer", "Buyer")
                        .WithMany("BrowsingHistories")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany()
                        .HasForeignKey("GigId");

                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Buyer");

                    b.Navigation("Gig");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Certification", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany("Certifications")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Education", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany("Educations")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.FavouriteGig", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Users.Buyer", null)
                        .WithMany("FavouriteGigs")
                        .HasForeignKey("BuyerId1");

                    b.HasOne("QuickHire.Domain.Users.FavouriteGigsList", "FavouriteGigsList")
                        .WithMany("FavouriteGigs")
                        .HasForeignKey("FavouriteGigsListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Gigs.Gig", "Gig")
                        .WithMany()
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("FavouriteGigsList");

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.FavouriteGigsList", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Buyer", "Buyer")
                        .WithMany("FavouriteGigsLists")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.IndustrySkillSeller", b =>
                {
                    b.HasOne("QuickHire.Domain.Categories.SubCategory", "IndustrySkill")
                        .WithMany()
                        .HasForeignKey("IndustrySkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IndustrySkill");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Notification", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Buyer", "Buyer")
                        .WithMany("Notifications")
                        .HasForeignKey("BuyerId");

                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany("Notifications")
                        .HasForeignKey("SellerId");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Portfolio", b =>
                {
                    b.HasOne("QuickHire.Domain.Categories.MainCategory", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany("Portfolios")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainCategory");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Seller", b =>
                {
                    b.HasOne("QuickHire.Domain.Categories.MainCategory", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Skill", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Seller", "Seller")
                        .WithMany("Skills")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.UserLanguage", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuickHire.Infrastructure.Persistence.Identity.ApplicationUser", null)
                        .WithMany("Languages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("QuickHire.Infrastructure.Persistence.Identity.ApplicationUser", b =>
                {
                    b.HasOne("QuickHire.Domain.Users.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("QuickHire.Domain.Users.BillingDetails", "BillingDetails")
                        .WithOne()
                        .HasForeignKey("QuickHire.Infrastructure.Persistence.Identity.ApplicationUser", "BillingDetailsId");

                    b.Navigation("Address");

                    b.Navigation("BillingDetails");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.GigFilter", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.MainCategory", b =>
                {
                    b.Navigation("FAQs");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.SubCategory", b =>
                {
                    b.Navigation("SubSubCategories");
                });

            modelBuilder.Entity("QuickHire.Domain.Categories.SubSubCategory", b =>
                {
                    b.Navigation("GigFilters");

                    b.Navigation("Gigs");
                });

            modelBuilder.Entity("QuickHire.Domain.CustomOffers.CustomOffer", b =>
                {
                    b.Navigation("InclusiveServices");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.Gig", b =>
                {
                    b.Navigation("CustomOffers");

                    b.Navigation("CustomRequests");

                    b.Navigation("FAQs");

                    b.Navigation("Metadata");

                    b.Navigation("Orders");

                    b.Navigation("PaymentPlans");

                    b.Navigation("Requirements");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("QuickHire.Domain.Gigs.PaymentPlan", b =>
                {
                    b.Navigation("Inclusions");
                });

            modelBuilder.Entity("QuickHire.Domain.Messaging.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("QuickHire.Domain.Messaging.Message", b =>
                {
                    b.Navigation("CustomOffer");

                    b.Navigation("CustomRequest");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Delivery", b =>
                {
                    b.Navigation("Message")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Order", b =>
                {
                    b.Navigation("Conversation")
                        .IsRequired();

                    b.Navigation("CustomOffer");

                    b.Navigation("Delivery");

                    b.Navigation("GigRequirementAnswers");

                    b.Navigation("Invoice");

                    b.Navigation("Reviews");

                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("QuickHire.Domain.Orders.Revision", b =>
                {
                    b.Navigation("Message")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickHire.Domain.ProjectBriefs.ProjectBrief", b =>
                {
                    b.Navigation("CustomOffers");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Buyer", b =>
                {
                    b.Navigation("BrowsingHistories");

                    b.Navigation("CustomOffers");

                    b.Navigation("FavouriteGigs");

                    b.Navigation("FavouriteGigsLists");

                    b.Navigation("Invoices");

                    b.Navigation("Notifications");

                    b.Navigation("PlacedOrders");

                    b.Navigation("ProjectBriefs");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.FavouriteGigsList", b =>
                {
                    b.Navigation("FavouriteGigs");
                });

            modelBuilder.Entity("QuickHire.Domain.Users.Seller", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("CustomOffers");

                    b.Navigation("Educations");

                    b.Navigation("Gigs");

                    b.Navigation("Notifications");

                    b.Navigation("Portfolios");

                    b.Navigation("Skills");

                    b.Navigation("SoldOrders");
                });

            modelBuilder.Entity("QuickHire.Infrastructure.Persistence.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Languages");
                });
#pragma warning restore 612, 618
        }
    }
}
